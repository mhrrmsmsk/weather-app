{"ast":null,"code":"var _jsxFileName = \"/Users/muharremsimsek/Desktop/React/src/weather-app/src/components/WeatherDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport { WeatherContext } from './WeatherContext';\nimport WeatherCard from './WeatherCard'; // Import WeatherCard component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cities = ['Istanbul', 'Ankara', 'Izmir', 'Bursa', 'Adana']; // City list\n\nconst WeatherDashboard = () => {\n  _s();\n  const {\n    forecast,\n    setCity\n  } = useContext(WeatherContext);\n  const [selectedCity, setSelectedCity] = useState('Istanbul');\n  const handleCityChange = e => {\n    const city = e.target.value;\n    setSelectedCity(city);\n    setCity(city);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hava Durumu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedCity,\n      onChange: handleCityChange,\n      children: cities.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: city,\n        children: city\n      }, city, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast\",\n      children: forecast ? forecast.map((day, index) => /*#__PURE__*/_jsxDEV(WeatherCard, {\n        day: day,\n        isToday: index === 0\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading forecast...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this) // Display a loading message if forecast is not available\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherDashboard, \"TZr18W1PO+rbC6UbI9jIJnGd9Ic=\");\n_c = WeatherDashboard;\nexport default WeatherDashboard;\nvar _c;\n$RefreshReg$(_c, \"WeatherDashboard\");","map":{"version":3,"names":["React","useContext","useState","WeatherContext","WeatherCard","jsxDEV","_jsxDEV","cities","WeatherDashboard","_s","forecast","setCity","selectedCity","setSelectedCity","handleCityChange","e","city","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","className","day","index","isToday","_c","$RefreshReg$"],"sources":["/Users/muharremsimsek/Desktop/React/src/weather-app/src/components/WeatherDashboard.js"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport { WeatherContext } from './WeatherContext';\nimport WeatherCard from './WeatherCard'; // Import WeatherCard component\n\nconst cities = ['Istanbul', 'Ankara', 'Izmir', 'Bursa', 'Adana']; // City list\n\nconst WeatherDashboard = () => {\n  const { forecast, setCity } = useContext(WeatherContext);\n  const [selectedCity, setSelectedCity] = useState('Istanbul');\n\n  const handleCityChange = (e) => {\n    const city = e.target.value;\n    setSelectedCity(city);\n    setCity(city);\n  };\n\n  return (\n    <div>\n      <h1>Hava Durumu</h1>\n      <select value={selectedCity} onChange={handleCityChange}>\n        {cities.map((city) => (\n          <option key={city} value={city}>\n            {city}\n          </option>\n        ))}\n      </select>\n\n      <div className=\"forecast\">\n        {forecast ? (\n          forecast.map((day, index) => (\n            <WeatherCard key={index} day={day} isToday={index === 0} />\n          ))\n        ) : (\n          <p>Loading forecast...</p> // Display a loading message if forecast is not available\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WeatherDashboard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,WAAW,MAAM,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,MAAM,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;;AAElE,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM;IAAEC,QAAQ;IAAEC;EAAQ,CAAC,GAAGV,UAAU,CAACE,cAAc,CAAC;EACxD,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,UAAU,CAAC;EAE5D,MAAMY,gBAAgB,GAAIC,CAAC,IAAK;IAC9B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IAC3BL,eAAe,CAACG,IAAI,CAAC;IACrBL,OAAO,CAACK,IAAI,CAAC;EACf,CAAC;EAED,oBACEV,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBjB,OAAA;MAAQY,KAAK,EAAEN,YAAa;MAACY,QAAQ,EAAEV,gBAAiB;MAAAK,QAAA,EACrDZ,MAAM,CAACkB,GAAG,CAAET,IAAI,iBACfV,OAAA;QAAmBY,KAAK,EAAEF,IAAK;QAAAG,QAAA,EAC5BH;MAAI,GADMA,IAAI;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAET,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,eAETjB,OAAA;MAAKoB,SAAS,EAAC,UAAU;MAAAP,QAAA,EACtBT,QAAQ,GACPA,QAAQ,CAACe,GAAG,CAAC,CAACE,GAAG,EAAEC,KAAK,kBACtBtB,OAAA,CAACF,WAAW;QAAauB,GAAG,EAAEA,GAAI;QAACE,OAAO,EAAED,KAAK,KAAK;MAAE,GAAtCA,KAAK;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmC,CAC3D,CAAC,gBAEFjB,OAAA;QAAAa,QAAA,EAAG;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,CAAC;IAC5B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACd,EAAA,CAhCID,gBAAgB;AAAAsB,EAAA,GAAhBtB,gBAAgB;AAkCtB,eAAeA,gBAAgB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}